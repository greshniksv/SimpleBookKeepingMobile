@page "/spend-dialog/{CostId:guid}"
@using System.Diagnostics
@using MediatR
@using SimpleBookKeepingMobile.CommandAndQueries.Costs.Queries
@using SimpleBookKeepingMobile.CommandAndQueries.Spends.Commands
@using SimpleBookKeepingMobile.DtoModels
@inject NavigationManager NavigationManager
@inject IMediator _mediator

<h3>@Title: @Name</h3>

<div class="form-control">
    <div class="accordion accordion-flush" id="spend_list">
        @{ int number = 0; }
        @foreach (var spendItem in spends)
        {
            var date = spendItem.Date;
            var detailId = spendItem.DetailId;
            number = number + 10;

            <div class="accordion-item">
                <h2 class="accordion-header" id="@($"flush-heading{number}")">
                    <button class="accordion-button collapsed" type="button"
                            data-bs-toggle="collapse"
                            data-bs-target="@($"#flush-collapse{number}")" aria-expanded="false"
                            aria-controls="@($"flush-collapse{number}")" @onclick="() => { showItem[detailId] = !showItem[detailId]; }">
                        @date.ToString("d")
                    </button>
                </h2>
                <div id="@($"flush-collapse{number}")" class="accordion-collapse collapse @(showItem[detailId]? "show": "")"
                     aria-labelledby="@($"flush-heading{number}")"
                     data-bs-parent="#accordionFlushExample">
                    <div class="accordion-body" style="padding: 5px;">
                        @foreach (var spend in spendItem.Spends)
                        {
                            <div class="mb-3">
                                <div class="col-auto">
                                    <div class="input-group mb-2">

                                        <textarea class="input-group-text me-1 w-75 text-wrap text-start" autocomplete="off"
                                                  @bind="spend.Comment">@spend.Comment</textarea>

                                        <input type="text" class="form-control ms-1" autocomplete="off"
                                               @bind-value="spend.Value" placeholder="Сумма">
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="d-grid gap-2 pt-1">
                            <button @onclick="(e => Save(detailId))" class="btn btn-success p-2">Сохранить</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private string Title = "Траты";
    private string Name;
    private IList<CostSpendDetailModel> spends;
    private Dictionary<Guid, bool>? showItem;

    [Parameter]
    public Guid CostId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadSpends();

        if (showItem == null)
        {
            showItem = new Dictionary<Guid, bool>();
            var first = true;
            foreach (var item in spends)
            {
                showItem.Add(item.DetailId, first);
                if (first)
                {
                    first = false;
                }
            }
        }
    }

    private async Task LoadSpends()
    {
        try
        {
            var costSpend = await _mediator.Send(new GetActiveCostSpendDetailsQuery()
            {
                UserId = Guid.Empty,
                CostId = CostId
            });

            spends = costSpend.Where(x => x.Date <= DateTime.Now)
                .OrderByDescending(x => x.Date).ToList();

            foreach (var item in spends)
            {
                item.Spends.Add(new SpendModel { Comment = "", Value = 0, Id = Guid.Empty }); // Add new empty spend item
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
        }
    }

    private async Task Save(Guid detailId)
    {
        var list = spends.FirstOrDefault(s => s.DetailId == detailId)?.Spends ?? new List<SpendModel>();

        foreach (SpendModel model in list)
        {
            if (model.Id == Guid.Empty)
            {
                if (model.Value != 0 || !string.IsNullOrEmpty(model.Comment))
                {
                    // Create new
                    await _mediator.Send(new InsertSpendCommand {
                        SpendModel = new AddSpendModel()
                        {
                            Id = model.Id,
                            CostDetailId = detailId,
                            Comment = model.Comment,
                            Value = model.Value,
                            CostId = CostId,
                            Image = string.Empty
                        },
                        UserId = Guid.Empty
                    });
                }
            }
            else if (model.Value == 0 && string.IsNullOrEmpty(model.Comment))
            {
                // Delete
                await _mediator.Send(new DeleteSpendCommand { SpendId = model.Id });
            }
            else
            {
                // Update
                await _mediator.Send(new UpdateSpendCommand {
                    SpendModel = new AddSpendModel()
                    {
                        Id = model.Id,
                        CostDetailId = detailId,
                        Comment = model.Comment,
                        Value = model.Value,
                        CostId = CostId,
                        Image = string.Empty
                    }, 
                    UserId = Guid.Empty
                });
            }
        }

        await LoadSpends();
        StateHasChanged();
    }
}
