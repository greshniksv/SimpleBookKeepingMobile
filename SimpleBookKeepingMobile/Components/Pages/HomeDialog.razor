@page "/"
@using System.Globalization
@using MediatR
@using SimpleBookKeepingMobile.CommandAndQueries.Plans.Queries
@using SimpleBookKeepingMobile.DtoModels
@inject IMediator _mediator
@inject NavigationManager Navigation

<div id="home_base" class="container">
    @if (isLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (planStatuses?.Any() == true)
    {
        @foreach (var plan in planStatuses)
        {
            <div class="card mb-1 shadow p-1 bg-white rounded">
                <div class="card-body">
                    <h5 class="card-title">@plan.Name</h5>
                    <p class="card-text pt-1">В кошельке: <b>@plan.Rest.ToString("N0") руб.</b> </p>
                    <div class="progress mb-3">
                        <div class="progress-bar bg-info" role="progressbar" style="width: @plan.Progress%;"
                             aria-valuenow="@plan.Progress" aria-valuemin="0" aria-valuemax="100">
                            @plan.Progress%
                        </div>
                    </div>
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var cost in plan.CostStatusModels)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center mt-2 clickable" @onclick="() => GoToSpend(cost.Id)">
                            <span>@cost.Name</span>
                            <small>@cost.Balance руб</small>
                        </li>
                    }
                </ul>
            </div>
        }
    }
    else
    {
        <div class="alert alert-info text-center" role="alert">
            Нет активных планов
        </div>
    }
</div>

@code {
    private List<PlanStatusModel>? planStatuses;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadPlanStatuses();
    }

    private async Task LoadPlanStatuses()
    {
        isLoading = true;
        try
        {
            Guid userId = Guid.Empty;
            List<PlanStatusModel> planStatusModels = new();
            var activePlans = await _mediator.Send(new GetPlansQuery { IsActive = true, UserId = userId });
            foreach (var activePlan in activePlans)
            {
                var planStatus = await _mediator.Send(new GetPlanStatusQuery { PlanId = activePlan.Id });
                planStatusModels.Add(planStatus);
            }

            planStatuses = planStatusModels;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading plan statuses: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task GoToSpend(Guid costId)
    {
        await Task.Delay(100);
        Navigation.NavigateTo($"/spend-dialog/{costId}");
    }
}
